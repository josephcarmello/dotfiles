#Shared Utils
source ~/dotfiles/.shared/.shared_colors
#

#   clean:  Clean those damn known host errors
#   --------------------------------------------------------
    kh () {
        sed -i.bak -e "$1"'d' ~/.ssh/known_hosts
    }

#   extract:  Extract most know archives with one command
#   ---------------------------------------------------------
    extract () {
        if [ -f $1 ] ; then
          case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
             esac
         else
             echo "'$1' is not a valid file"
         fi
    }

#   ii:  display useful host related informaton
#   -------------------------------------------------------------------
    ii() {
        echo -e "\nYou are logged on ${RED}$HOST"
        echo -e "\nAdditional information:$NC " ; uname -a
        echo -e "\n${RED}Users logged on:$NC " ; w -h
        echo -e "\n${RED}Current date :$NC " ; date
        echo -e "\n${RED}Machine stats :$NC " ; uptime
        echo -e "\n${RED}Public facing IP Address :$NC " ;myip
        #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
        echo
    }

#   headers:  get the headers of a cURL request
#   ---------------------------------------------------------
    headers(){
        curl -is "$@" | sed '/^$/,$d'
    }


#   pug:  Puppet git pull on our remote puppet master
#   ---------------------------------------------------------
    function pug () {
        ssh -t puppet.intranet.1stdibs.com "sudo -u root /bin/bash -c 'cd /etc/puppet/ && git pull'"
    }

#   weather:  Gets the current weather for my area via cli
#   ---------------------------------------------------------
    function weather () {
        curl https://wttr.in/
    }

#   gbf:  brings a provided git branch back in line with the master branch
#   ---------------------------------------------------------
    function gbf () {
        if [ $# -eq 0 ]
          then
            echo "No arguments supplied - ending"
          else
            echo "Attempting to bring $1 inline with master branch..."
            echo "Checking out master branch"
            git checkout master
            echo "Fetching remote"
            git fetch -p origin
            echo "merge remote into local master"
            git merge origin/master
            echo "checking out feature branch"
            git checkout $1
            echo "merging feature branch with master"
            git merge master
            echo "All set!"
        fi
    }

#   listening:  find out whats listening on a port or what port an app is listening on
#   ----------------------------------------------------------------------------------

    listening() {
        if [ $# -eq 0 ]; then
            sudo lsof -iTCP -sTCP:LISTEN -n -P
        elif [ $# -eq 1 ]; then
            sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
        else
            echo "Usage: listening [pattern]"
        fi
    }
