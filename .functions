# Shared Utils
source ~/dotfiles/.shared/.shared_colors

#   kh: Clean those damn known host errors
#   --------------------------------------------------------
kh() {
    sed -i.bak -e "$1"'d' ~/.ssh/known_hosts
}

#   extract: Extract most known archives with one command
#   --------------------------------------------------------
extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

#   ii: Display useful host related information
#   --------------------------------------------------------
ii() {
    echo -e "\nYou are logged on ${RED}$HOST"
    echo -e "\nAdditional information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
    echo -e "\n${RED}Public facing IP Address :$NC " ; myip
    #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
    echo
}

#   headers: Get the headers of a cURL request
#   --------------------------------------------------------
headers() {
    curl -is "$@" | sed '/^$/,$d'
}

#   pug: Puppet git pull on our remote puppet master
#   --------------------------------------------------------
pug() {
    ssh -t puppet.intranet.1stdibs.com "sudo -u root /bin/bash -c 'cd /etc/puppet/ && git pull'"
}

#   weather: Gets the current weather for my area via cli
#   --------------------------------------------------------
weather() {
    curl https://wttr.in/
}

#   gbf: Brings a provided git branch back in line with the master branch
#   --------------------------------------------------------
gbf() {
    if [ $# -eq 0 ]; then
        echo "No arguments supplied - ending"
    else
        echo "Attempting to bring $1 inline with master branch..."
        echo "Checking out master branch"
        git checkout master
        echo "Fetching remote"
        git fetch -p origin
        echo "merge remote into local master"
        git merge origin/master
        echo "checking out feature branch"
        git checkout $1
        echo "merging feature branch with master"
        git merge master
        echo "All set!"
    fi
}

#   listening: Find out what's listening on a port or what port an app is listening on
#   --------------------------------------------------------
listening() {
    if [ $# -eq 0 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P
    elif [ $# -eq 1 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
    else
        echo "Usage: listening [pattern]"
    fi
}

#   terragrunt: Run terragrunt in a containerized environment with SSH and AWS config
#   --------------------------------------------------------
terragrunt() {
    local GIT_RSA_KEY="${GIT_RSA_KEY:-$HOME/.ssh/id_rsa}"
    local GIT_CONFIG_PATH="${GIT_CONFIG_PATH:-$HOME/.gitconfig}"
    local SSH_KNOWN_HOSTS_PATH="${SSH_KNOWN_HOSTS_PATH:-$HOME/.ssh/known_hosts}"
    local SSH_CONFIG_PATH="${SSH_CONFIG_PATH:-$HOME/.ssh/config}"
    local AWS_CONFIG_PATH="${AWS_CONFIG_PATH:-$HOME/.aws}"
    local PROJECT_ROOT="${PROJECT_ROOT:-$HOME/projects/1stdibs/dibs-terraform}"
    local CONTAINER_WORKDIR="/data"
    local DOCKER_IMAGE="devopsinfra/docker-terragrunt:tf-1.3.6-tg-0.42.5"
    local CURRENT_DIR="$(pwd)"
    local RELATIVE_DIR="${CURRENT_DIR#$(cd "$PROJECT_ROOT" && pwd)}"
    local CONTAINER_CWD="$CONTAINER_WORKDIR$RELATIVE_DIR"

    docker run --rm \
        --tty --interactive \
        --volume "$SSH_CONFIG_PATH:/root/.ssh/config:ro" \
        --volume "$GIT_CONFIG_PATH:/root/.gitconfig:ro" \
        --volume "$GIT_RSA_KEY:/root/.ssh/id_rsa:ro" \
        --volume "$SSH_KNOWN_HOSTS_PATH:/root/.ssh/known_hosts:ro" \
        --volume "$AWS_CONFIG_PATH:/root/.aws" \
        --volume "$PROJECT_ROOT:$CONTAINER_WORKDIR" \
        --workdir "$CONTAINER_CWD" \
        "$DOCKER_IMAGE" \
        terragrunt "$@"
}

#   terraform: Run terraform in a containerized environment with SSH and AWS config
#   --------------------------------------------------------
terraform() {
    local GIT_RSA_KEY="${GIT_RSA_KEY:-$HOME/.ssh/id_rsa}"
    local GIT_CONFIG_PATH="${GIT_CONFIG_PATH:-$HOME/.gitconfig}"
    local SSH_KNOWN_HOSTS_PATH="${SSH_KNOWN_HOSTS_PATH:-$HOME/.ssh/known_hosts}"
    local AWS_CONFIG_PATH="${AWS_CONFIG_PATH:-$HOME/.aws}"
    local PROJECT_ROOT="${PROJECT_ROOT:-$HOME/projects/1stdibs/dibs-terraform}"
    local CONTAINER_WORKDIR="/data"
    local DOCKER_IMAGE="devopsinfra/docker-terragrunt:tf-1.3.6-tg-0.42.5"
    local CURRENT_DIR="$(pwd)"
    local RELATIVE_DIR="${CURRENT_DIR#$(cd "$PROJECT_ROOT" && pwd)}"
    local CONTAINER_CWD="$CONTAINER_WORKDIR$RELATIVE_DIR"

    docker run --rm \
        --tty --interactive \
        --volume "$GIT_CONFIG_PATH:/root/.gitconfig:ro" \
        --volume "$GIT_RSA_KEY:/root/.ssh/id_rsa:ro" \
        --volume "$SSH_KNOWN_HOSTS_PATH:/root/.ssh/known_hosts:ro" \
        --volume "$AWS_CONFIG_PATH:/root/.aws" \
        --volume "$PROJECT_ROOT:$CONTAINER_WORKDIR" \
        --workdir "$CONTAINER_CWD" \
        "$DOCKER_IMAGE" \
        terraform "$@"
}

#   setup_git_hosts: Add SSH host keys for common git providers to known_hosts
#   --------------------------------------------------------
setup_git_hosts() {
    local KNOWN_HOSTS_FILE="${SSH_KNOWN_HOSTS_PATH:-$HOME/.ssh/known_hosts}"
    
    echo "Adding SSH host keys for common git providers to $KNOWN_HOSTS_FILE..."
    
    # Create known_hosts file if it doesn't exist
    touch "$KNOWN_HOSTS_FILE"
    
    # Add GitHub
    echo "Adding GitHub..."
    ssh-keyscan -H github.com >> "$KNOWN_HOSTS_FILE" 2>/dev/null
    
    echo "SSH host keys added successfully!"
}